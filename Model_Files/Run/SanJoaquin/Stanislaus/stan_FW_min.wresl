! stan_FW_min.wresl
! Edward Chang
! 12/02/1999
! Joint Model
! This code calculates the minimum fish and wildlife flows on the Stanislaus river
! Revised by R. Field, 01/15/2004, Reclamation, removed stanmin_add from cycle 1
! it exists in cycle 6 InstreamFromOID.wresl
! Revised by C. Hsu, 3/10/03, USBR, for review and documentation project
! Based on Modifications by Hilts 20090204 to hopefully eliminate the "transitional plan" - commented out use of "NMforecast3"
!#####################################################################################
/*
The minimum fish and wildlife flows are determined using the New Melones forecast, NMforeast1.
This forecast determines an annual delivery requirement from a look-up table.  From the annual
delivery requirement another look-up table is used to determine the monthly requirements.
In April and May, a pulse flow requirement is also calculated, but the pulse flow only applies
during the last 16 days in April and the first 15 days in May.  The goal of the resulting monthly
requirement is to maintain a minimum fish and wildlife flow downstream of Goodwin Dam.  To ensure
a minimum flow, it is only necessary to impose this requirement on reach C_STS059 
*/

/*
Fish & Wildlife flows
*/

!  RPA std
define stanfish_yr {select stanf from stanf_yr given SJRI = wyt_SJR_stan  use linear }
! Alias stanfish_yr for output
define stanfish_yrDV {alias stanfish_yr units 'taf'}

! Define minimum flows for Cycle 1 to be imposed on releases from New Melones
define stanmin {select flow from stan_rpa given stanyr=stanfish_yr use linear where month=month }
define stanmin_dv {alias stanmin kind 'fish-flow-req' units 'cfs'}

! Set limits on minimum fish flows for Goodwin
goal setC_STS059cycle1 { C_STS059_mif < stanmin }


! @coeqwal - eflows
define stan_eflows {timeseries 'EFLOWS_STS011' kind 'FLOW-MIN-EFLOW' units 'TAF' convert 'CFS'} ! eflows for lower Stanislaus
define stan_eflows_dv {alias stan_eflows kind 'flow-min-eflow' units 'CFS'}

! @coeqwal - eflows - allow option from main file
define stanmin_select {
	case no_lowerstan_flow_reqt {
	condition stanflow_opt < 0.5  ! stanflow_opt set in main file
	value 0.
	}
	case lowerstan_eflows_v1 {
	condition stanflow_opt < 1.5  ! stanflow_opt = 1 in main file 
	value stan_eflows
	}
	case otherwise {
	condition always
	value 0.0}
}

goal setC_STS011cycle1 {C_STS011_MIF < stanmin_select } !stan_eflows}
/*
goal setC_STS011cycle1 {
	lhs C_STS011_MIF
	case no_lowerstan_flow_reqt2 {
		condition stanflow_opt <0.5
		rhs stanmin_select
		lhs > rhs penalty 99999}
	case lowerstan_eflows_v1 {
		condition stanflow_opt < 1.5
		rhs stanmin_select
		lhs > rhs penalty 0
		lhs < rhs penalty 99999}
	}
*/
! save the stanmin_selection for reference
define stanmin_selectdv {alias stanmin_select kind 'FLOW-MIN-EFLOW' units 'cfs'}
